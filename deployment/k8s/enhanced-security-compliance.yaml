apiVersion: v1
kind: Namespace
metadata:
  name: security-compliance
  labels:
    security.istio.io/tlsMode: istio
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-policies
  namespace: security-compliance
data:
  pod-security-policy.yaml: |
    apiVersion: templates.gatekeeper.sh/v1beta1
    kind: ConstraintTemplate
    metadata:
      name: requiredsecuritycontext
    spec:
      crd:
        spec:
          names:
            kind: RequiredSecurityContext
          validation:
            openAPIV3Schema:
              type: object
              properties:
                runAsNonRoot:
                  type: boolean
                readOnlyRootFilesystem:
                  type: boolean
                allowPrivilegeEscalation:
                  type: boolean
      targets:
        - target: admission.k8s.gatekeeper.sh
          rego: |
            package requiredsecuritycontext
            
            violation[{"msg": msg}] {
              container := input.review.object.spec.containers[_]
              not container.securityContext.runAsNonRoot == true
              msg := "Container must run as non-root user"
            }
            
            violation[{"msg": msg}] {
              container := input.review.object.spec.containers[_]
              not container.securityContext.readOnlyRootFilesystem == true
              msg := "Container must have read-only root filesystem"
            }
            
            violation[{"msg": msg}] {
              container := input.review.object.spec.containers[_]
              not container.securityContext.allowPrivilegeEscalation == false
              msg := "Container must not allow privilege escalation"
            }

  network-policy.yaml: |
    apiVersion: templates.gatekeeper.sh/v1beta1
    kind: ConstraintTemplate
    metadata:
      name: requirednetworkpolicy
    spec:
      crd:
        spec:
          names:
            kind: RequiredNetworkPolicy
          validation:
            openAPIV3Schema:
              type: object
      targets:
        - target: admission.k8s.gatekeeper.sh
          rego: |
            package requirednetworkpolicy
            
            violation[{"msg": msg}] {
              input.review.kind.kind == "Namespace"
              not network_policy_exists
              msg := "Namespace must have a NetworkPolicy"
            }
            
            network_policy_exists {
              # This would check if a NetworkPolicy exists for the namespace
              # Implementation would query existing NetworkPolicies
              true
            }

  compliance-scanner.yaml: |
    apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: compliance-scanner
      namespace: security-compliance
    spec:
      schedule: "0 2 * * *"  # Daily at 2 AM
      jobTemplate:
        spec:
          template:
            metadata:
              labels:
                app: compliance-scanner
            spec:
              restartPolicy: OnFailure
              serviceAccountName: compliance-scanner
              containers:
              - name: scanner
                image: aquasec/kube-bench:latest
                command:
                - /bin/sh
                - -c
                - |
                  echo "Running CIS Kubernetes Benchmark..."
                  kube-bench --json > /reports/cis-benchmark-$(date +%Y%m%d).json
                  
                  echo "Running custom compliance checks..."
                  python3 /scripts/compliance-checker.py
                  
                  echo "Uploading results to central repository..."
                  curl -X POST -H "Content-Type: application/json" \
                    -d @/reports/cis-benchmark-$(date +%Y%m%d).json \
                    http://compliance-dashboard:8080/api/reports
                volumeMounts:
                - name: reports
                  mountPath: /reports
                - name: scripts
                  mountPath: /scripts
              volumes:
              - name: reports
                persistentVolumeClaim:
                  claimName: compliance-reports
              - name: scripts
                configMap:
                  name: compliance-scripts

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compliance-scanner
  namespace: security-compliance
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compliance-scanner
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["*"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]
- apiGroups: ["security.openshift.io"]
  resources: ["*"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compliance-scanner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compliance-scanner
subjects:
- kind: ServiceAccount
  name: compliance-scanner
  namespace: security-compliance

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-scripts
  namespace: security-compliance
data:
  compliance-checker.py: |
    #!/usr/bin/env python3
    """
    Enhanced Compliance Checker for multiple frameworks
    Supports: SOC2, GDPR, NIST, ISO27001, PCI-DSS, HIPAA
    """
    
    import json
    import os
    import subprocess
    import sys
    from datetime import datetime
    from typing import Dict, List, Any
    import kubernetes
    from kubernetes import client, config
    
    class ComplianceChecker:
        def __init__(self):
            config.load_incluster_config()
            self.v1 = client.CoreV1Api()
            self.apps_v1 = client.AppsV1Api()
            self.rbac_v1 = client.RbacAuthorizationV1Api()
            self.network_v1 = client.NetworkingV1Api()
            
        def check_soc2_compliance(self) -> Dict:
            """Check SOC2 Type II compliance requirements."""
            results = {
                "framework": "SOC2",
                "checks": [],
                "score": 0,
                "total_checks": 0
            }
            
            # Security - Access Controls
            rbac_check = self._check_rbac_controls()
            results["checks"].append({
                "category": "Security",
                "control": "Access Controls (CC6.1)",
                "status": "PASS" if rbac_check else "FAIL",
                "description": "RBAC properly configured"
            })
            
            # Availability - System Monitoring
            monitoring_check = self._check_monitoring_stack()
            results["checks"].append({
                "category": "Availability",
                "control": "System Monitoring (CC7.1)",
                "status": "PASS" if monitoring_check else "FAIL",
                "description": "Comprehensive monitoring in place"
            })
            
            # Processing Integrity - System Boundaries
            network_check = self._check_network_policies()
            results["checks"].append({
                "category": "Processing Integrity",
                "control": "System Boundaries (CC8.1)",
                "status": "PASS" if network_check else "FAIL",
                "description": "Network segmentation implemented"
            })
            
            # Confidentiality - Data Encryption
            encryption_check = self._check_encryption_at_rest()
            results["checks"].append({
                "category": "Confidentiality",
                "control": "Data Encryption (CC6.7)",
                "status": "PASS" if encryption_check else "FAIL",
                "description": "Data encrypted at rest and in transit"
            })
            
            results["total_checks"] = len(results["checks"])
            results["score"] = len([c for c in results["checks"] if c["status"] == "PASS"])
            
            return results
        
        def check_gdpr_compliance(self) -> Dict:
            """Check GDPR compliance requirements."""
            results = {
                "framework": "GDPR",
                "checks": [],
                "score": 0,
                "total_checks": 0
            }
            
            # Data Protection by Design (Article 25)
            privacy_check = self._check_privacy_by_design()
            results["checks"].append({
                "article": "Article 25",
                "requirement": "Data Protection by Design",
                "status": "PASS" if privacy_check else "FAIL",
                "description": "Privacy controls built into system design"
            })
            
            # Security of Processing (Article 32)
            security_check = self._check_security_measures()
            results["checks"].append({
                "article": "Article 32",
                "requirement": "Security of Processing",
                "status": "PASS" if security_check else "FAIL",
                "description": "Appropriate technical and organizational measures"
            })
            
            # Data Breach Notification (Article 33)
            breach_check = self._check_breach_detection()
            results["checks"].append({
                "article": "Article 33",
                "requirement": "Breach Notification",
                "status": "PASS" if breach_check else "FAIL",
                "description": "Breach detection and notification systems"
            })
            
            # Records of Processing (Article 30)
            logging_check = self._check_audit_logging()
            results["checks"].append({
                "article": "Article 30",
                "requirement": "Records of Processing",
                "status": "PASS" if logging_check else "FAIL",
                "description": "Comprehensive audit logging"
            })
            
            results["total_checks"] = len(results["checks"])
            results["score"] = len([c for c in results["checks"] if c["status"] == "PASS"])
            
            return results
        
        def check_nist_compliance(self) -> Dict:
            """Check NIST Cybersecurity Framework compliance."""
            results = {
                "framework": "NIST CSF",
                "checks": [],
                "score": 0,
                "total_checks": 0
            }
            
            # Identify (ID)
            asset_check = self._check_asset_inventory()
            results["checks"].append({
                "function": "Identify",
                "category": "Asset Management (ID.AM)",
                "status": "PASS" if asset_check else "FAIL",
                "description": "Asset inventory and management"
            })
            
            # Protect (PR)
            access_check = self._check_access_control()
            results["checks"].append({
                "function": "Protect",
                "category": "Identity Management (PR.AC)",
                "status": "PASS" if access_check else "FAIL",
                "description": "Identity and access management"
            })
            
            # Detect (DE)
            anomaly_check = self._check_anomaly_detection()
            results["checks"].append({
                "function": "Detect",
                "category": "Anomalies and Events (DE.AE)",
                "status": "PASS" if anomaly_check else "FAIL",
                "description": "Anomaly and event detection"
            })
            
            # Respond (RS)
            incident_check = self._check_incident_response()
            results["checks"].append({
                "function": "Respond",
                "category": "Response Planning (RS.RP)",
                "status": "PASS" if incident_check else "FAIL",
                "description": "Incident response procedures"
            })
            
            # Recover (RC)
            recovery_check = self._check_recovery_procedures()
            results["checks"].append({
                "function": "Recover",
                "category": "Recovery Planning (RC.RP)",
                "status": "PASS" if recovery_check else "FAIL",
                "description": "Recovery and continuity planning"
            })
            
            results["total_checks"] = len(results["checks"])
            results["score"] = len([c for c in results["checks"] if c["status"] == "PASS"])
            
            return results
        
        def check_iso27001_compliance(self) -> Dict:
            """Check ISO 27001 compliance requirements."""
            results = {
                "framework": "ISO 27001",
                "checks": [],
                "score": 0,
                "total_checks": 0
            }
            
            # A.9 Access Control
            access_mgmt_check = self._check_access_management()
            results["checks"].append({
                "annex": "A.9",
                "control": "Access Control",
                "status": "PASS" if access_mgmt_check else "FAIL",
                "description": "Business requirement for access control"
            })
            
            # A.10 Cryptography
            crypto_check = self._check_cryptographic_controls()
            results["checks"].append({
                "annex": "A.10",
                "control": "Cryptography",
                "status": "PASS" if crypto_check else "FAIL",
                "description": "Cryptographic policy and key management"
            })
            
            # A.12 Operations Security
            ops_security_check = self._check_operations_security()
            results["checks"].append({
                "annex": "A.12",
                "control": "Operations Security",
                "status": "PASS" if ops_security_check else "FAIL",
                "description": "Operational procedures and responsibilities"
            })
            
            # A.16 Information Security Incident Management
            incident_mgmt_check = self._check_incident_management()
            results["checks"].append({
                "annex": "A.16",
                "control": "Incident Management",
                "status": "PASS" if incident_mgmt_check else "FAIL",
                "description": "Information security incident management"
            })
            
            results["total_checks"] = len(results["checks"])
            results["score"] = len([c for c in results["checks"] if c["status"] == "PASS"])
            
            return results
        
        def generate_compliance_report(self) -> Dict:
            """Generate comprehensive compliance report."""
            report = {
                "timestamp": datetime.utcnow().isoformat(),
                "cluster": os.getenv("CLUSTER_NAME", "unknown"),
                "environment": os.getenv("ENVIRONMENT", "unknown"),
                "frameworks": {}
            }
            
            # Run all compliance checks
            report["frameworks"]["soc2"] = self.check_soc2_compliance()
            report["frameworks"]["gdpr"] = self.check_gdpr_compliance()
            report["frameworks"]["nist"] = self.check_nist_compliance()
            report["frameworks"]["iso27001"] = self.check_iso27001_compliance()
            
            # Calculate overall compliance score
            total_checks = sum(f["total_checks"] for f in report["frameworks"].values())
            total_score = sum(f["score"] for f in report["frameworks"].values())
            report["overall_score"] = {
                "percentage": round((total_score / total_checks) * 100, 2) if total_checks > 0 else 0,
                "passed": total_score,
                "total": total_checks
            }
            
            return report
        
        # Helper methods for specific checks
        def _check_rbac_controls(self) -> bool:
            """Check if proper RBAC controls are in place."""
            try:
                roles = self.rbac_v1.list_cluster_role()
                bindings = self.rbac_v1.list_cluster_role_binding()
                # Check for overly permissive roles
                return len(roles.items) > 0 and len(bindings.items) > 0
            except Exception:
                return False
        
        def _check_monitoring_stack(self) -> bool:
            """Check if monitoring stack is deployed."""
            try:
                pods = self.v1.list_namespaced_pod(namespace="monitoring")
                prometheus_pods = [p for p in pods.items if "prometheus" in p.metadata.name]
                return len(prometheus_pods) > 0
            except Exception:
                return False
        
        def _check_network_policies(self) -> bool:
            """Check if network policies are implemented."""
            try:
                policies = self.network_v1.list_network_policy_for_all_namespaces()
                return len(policies.items) > 0
            except Exception:
                return False
        
        def _check_encryption_at_rest(self) -> bool:
            """Check if encryption at rest is enabled."""
            # This would check etcd encryption, storage encryption, etc.
            return True  # Placeholder
        
        def _check_privacy_by_design(self) -> bool:
            """Check privacy by design implementation."""
            return True  # Placeholder
        
        def _check_security_measures(self) -> bool:
            """Check security measures implementation."""
            return True  # Placeholder
        
        def _check_breach_detection(self) -> bool:
            """Check breach detection capabilities."""
            try:
                pods = self.v1.list_namespaced_pod(namespace="security")
                falco_pods = [p for p in pods.items if "falco" in p.metadata.name]
                return len(falco_pods) > 0
            except Exception:
                return False
        
        def _check_audit_logging(self) -> bool:
            """Check audit logging configuration."""
            return True  # Placeholder
        
        def _check_asset_inventory(self) -> bool:
            """Check asset inventory management."""
            return True  # Placeholder
        
        def _check_access_control(self) -> bool:
            """Check access control implementation."""
            return self._check_rbac_controls()
        
        def _check_anomaly_detection(self) -> bool:
            """Check anomaly detection systems."""
            return self._check_breach_detection()
        
        def _check_incident_response(self) -> bool:
            """Check incident response procedures."""
            return True  # Placeholder
        
        def _check_recovery_procedures(self) -> bool:
            """Check recovery procedures."""
            try:
                pods = self.v1.list_namespaced_pod(namespace="velero")
                return len(pods.items) > 0
            except Exception:
                return False
        
        def _check_access_management(self) -> bool:
            """Check access management."""
            return self._check_rbac_controls()
        
        def _check_cryptographic_controls(self) -> bool:
            """Check cryptographic controls."""
            return self._check_encryption_at_rest()
        
        def _check_operations_security(self) -> bool:
            """Check operations security."""
            return True  # Placeholder
        
        def _check_incident_management(self) -> bool:
            """Check incident management."""
            return self._check_incident_response()
    
    if __name__ == "__main__":
        checker = ComplianceChecker()
        report = checker.generate_compliance_report()
        
        # Save report
        with open(f"/reports/compliance-report-{datetime.now().strftime('%Y%m%d')}.json", "w") as f:
            json.dump(report, f, indent=2)
        
        print(f"Compliance check completed. Overall score: {report['overall_score']['percentage']}%")
        print(f"Passed: {report['overall_score']['passed']}/{report['overall_score']['total']} checks")

  vulnerability-scanner.py: |
    #!/usr/bin/env python3
    """
    Enhanced Vulnerability Scanner Integration
    """
    
    import json
    import subprocess
    import sys
    from datetime import datetime
    from typing import Dict, List
    
    class VulnerabilityScanner:
        def __init__(self):
            self.scan_results = {}
        
        def scan_container_images(self) -> Dict:
            """Scan container images for vulnerabilities."""
            results = []
            
            # Get all running pods
            cmd = ["kubectl", "get", "pods", "--all-namespaces", "-o", "json"]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                pods_data = json.loads(result.stdout)
                
                for pod in pods_data.get("items", []):
                    for container in pod.get("spec", {}).get("containers", []):
                        image = container.get("image", "")
                        if image:
                            scan_result = self._scan_image_with_trivy(image)
                            results.append({
                                "image": image,
                                "pod": pod.get("metadata", {}).get("name", ""),
                                "namespace": pod.get("metadata", {}).get("namespace", ""),
                                "vulnerabilities": scan_result
                            })
            
            return {"image_scans": results}
        
        def _scan_image_with_trivy(self, image: str) -> Dict:
            """Scan image with Trivy."""
            cmd = ["trivy", "image", "--format", "json", image]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                try:
                    return json.loads(result.stdout)
                except json.JSONDecodeError:
                    return {"error": "Failed to parse Trivy output"}
            else:
                return {"error": f"Trivy scan failed: {result.stderr}"}
        
        def generate_vulnerability_report(self) -> Dict:
            """Generate comprehensive vulnerability report."""
            report = {
                "timestamp": datetime.utcnow().isoformat(),
                "scans": {}
            }
            
            report["scans"]["container_images"] = self.scan_container_images()
            
            return report
    
    if __name__ == "__main__":
        scanner = VulnerabilityScanner()
        report = scanner.generate_vulnerability_report()
        
        with open(f"/reports/vulnerability-report-{datetime.now().strftime('%Y%m%d')}.json", "w") as f:
            json.dump(report, f, indent=2)
        
        print("Vulnerability scan completed")

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-dashboard
  namespace: security-compliance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compliance-dashboard
  template:
    metadata:
      labels:
        app: compliance-dashboard
    spec:
      serviceAccountName: compliance-scanner
      containers:
      - name: dashboard
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: dashboard-config
          mountPath: /usr/share/nginx/html
        - name: reports
          mountPath: /reports
      volumes:
      - name: dashboard-config
        configMap:
          name: compliance-dashboard-config
      - name: reports
        persistentVolumeClaim:
          claimName: compliance-reports

---
apiVersion: v1
kind: Service
metadata:
  name: compliance-dashboard
  namespace: security-compliance
spec:
  selector:
    app: compliance-dashboard
  ports:
  - port: 8080
    targetPort: 80
  type: LoadBalancer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-dashboard-config
  namespace: security-compliance
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>MetaFunction Compliance Dashboard</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                padding: 30px;
            }
            .header {
                border-bottom: 2px solid #e9ecef;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            .framework-card {
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 20px;
                margin-bottom: 20px;
                background: #f8f9fa;
            }
            .status-pass { color: #28a745; font-weight: bold; }
            .status-fail { color: #dc3545; font-weight: bold; }
            .score-circle {
                display: inline-block;
                width: 60px;
                height: 60px;
                border-radius: 50%;
                background: #28a745;
                color: white;
                text-align: center;
                line-height: 60px;
                font-weight: bold;
                margin-right: 15px;
            }
            .score-circle.warning { background: #ffc107; }
            .score-circle.danger { background: #dc3545; }
            .checks-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }
            .check-item {
                background: white;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 15px;
            }
        </style>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🛡️ MetaFunction Compliance Dashboard</h1>
                <p>Comprehensive compliance monitoring across multiple frameworks</p>
            </div>
            
            <div id="overview">
                <h2>Compliance Overview</h2>
                <div id="framework-summary"></div>
            </div>
            
            <div id="detailed-results">
                <h2>Detailed Results</h2>
                <div id="framework-details"></div>
            </div>
            
            <canvas id="complianceChart" width="400" height="200"></canvas>
        </div>
        
        <script>
            // Load and display compliance data
            async function loadComplianceData() {
                try {
                    const response = await fetch('/api/compliance/latest');
                    const data = await response.json();
                    displayComplianceData(data);
                } catch (error) {
                    console.error('Failed to load compliance data:', error);
                    document.getElementById('framework-summary').innerHTML = 
                        '<p>Failed to load compliance data. Please check if the compliance scanner is running.</p>';
                }
            }
            
            function displayComplianceData(data) {
                // Display framework summary
                const summaryDiv = document.getElementById('framework-summary');
                const detailsDiv = document.getElementById('framework-details');
                
                let summaryHTML = '<div class="frameworks-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">';
                let detailsHTML = '';
                
                Object.entries(data.frameworks || {}).forEach(([name, framework]) => {
                    const percentage = Math.round((framework.score / framework.total_checks) * 100);
                    const scoreClass = percentage >= 80 ? '' : percentage >= 60 ? 'warning' : 'danger';
                    
                    summaryHTML += `
                        <div class="framework-card">
                            <div class="score-circle ${scoreClass}">${percentage}%</div>
                            <h3>${name.toUpperCase()}</h3>
                            <p>${framework.score}/${framework.total_checks} checks passed</p>
                        </div>
                    `;
                    
                    detailsHTML += `
                        <div class="framework-card">
                            <h3>${name.toUpperCase()} - Detailed Results</h3>
                            <div class="checks-grid">
                    `;
                    
                    framework.checks.forEach(check => {
                        detailsHTML += `
                            <div class="check-item">
                                <div class="${check.status === 'PASS' ? 'status-pass' : 'status-fail'}">
                                    ${check.status === 'PASS' ? '✅' : '❌'} ${check.status}
                                </div>
                                <strong>${check.control || check.requirement || check.category}</strong>
                                <p>${check.description}</p>
                            </div>
                        `;
                    });
                    
                    detailsHTML += '</div></div>';
                });
                
                summaryHTML += '</div>';
                summaryDiv.innerHTML = summaryHTML;
                detailsDiv.innerHTML = detailsHTML;
                
                // Create compliance chart
                createComplianceChart(data);
            }
            
            function createComplianceChart(data) {
                const ctx = document.getElementById('complianceChart').getContext('2d');
                const frameworkNames = Object.keys(data.frameworks || {});
                const scores = frameworkNames.map(name => {
                    const framework = data.frameworks[name];
                    return Math.round((framework.score / framework.total_checks) * 100);
                });
                
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: frameworkNames.map(name => name.toUpperCase()),
                        datasets: [{
                            label: 'Compliance Score (%)',
                            data: scores,
                            backgroundColor: scores.map(score => 
                                score >= 80 ? '#28a745' : score >= 60 ? '#ffc107' : '#dc3545'
                            ),
                            borderColor: '#dee2e6',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Compliance Scores by Framework'
                            }
                        }
                    }
                });
            }
            
            // Load data on page load
            loadComplianceData();
            
            // Refresh data every 5 minutes
            setInterval(loadComplianceData, 5 * 60 * 1000);
        </script>
    </body>
    </html>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: compliance-reports
  namespace: security-compliance
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vulnerability-scanner
  namespace: security-compliance
spec:
  schedule: "0 4 * * *"  # Daily at 4 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: vulnerability-scanner
        spec:
          restartPolicy: OnFailure
          serviceAccountName: compliance-scanner
          containers:
          - name: scanner
            image: aquasec/trivy:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Running vulnerability scans..."
              python3 /scripts/vulnerability-scanner.py
              
              echo "Scanning cluster configuration..."
              trivy k8s --report summary cluster
            volumeMounts:
            - name: reports
              mountPath: /reports
            - name: scripts
              mountPath: /scripts
          volumes:
          - name: reports
            persistentVolumeClaim:
              claimName: compliance-reports
          - name: scripts
            configMap:
              name: compliance-scripts

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: compliance-network-policy
  namespace: security-compliance
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: compliance-dashboard
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
