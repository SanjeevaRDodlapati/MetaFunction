# ArgoCD Application for MetaFunction GitOps
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: metafunction
  namespace: argocd
  labels:
    app: metafunction
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/your-org/metafunction
    targetRevision: main
    path: deployment/helm/metafunction
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: metafunction
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  revisionHistoryLimit: 3
---
# ArgoCD Application for Infrastructure
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: metafunction-infrastructure
  namespace: argocd
  labels:
    app: metafunction-infrastructure
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/your-org/metafunction
    targetRevision: main
    path: deployment/k8s
  destination:
    server: https://kubernetes.default.svc
    namespace: metafunction
  syncPolicy:
    automated:
      prune: false
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  revisionHistoryLimit: 3
---
# ArgoCD AppProject for MetaFunction
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: metafunction-project
  namespace: argocd
spec:
  description: MetaFunction Project
  sourceRepos:
    - 'https://github.com/your-org/metafunction'
    - 'https://charts.bitnami.com/bitnami'
    - 'https://prometheus-community.github.io/helm-charts'
    - 'https://grafana.github.io/helm-charts'
  destinations:
    - namespace: metafunction
      server: https://kubernetes.default.svc
    - namespace: monitoring
      server: https://kubernetes.default.svc
    - namespace: kong
      server: https://kubernetes.default.svc
  clusterResourceWhitelist:
    - group: ''
      kind: Namespace
    - group: rbac.authorization.k8s.io
      kind: ClusterRole
    - group: rbac.authorization.k8s.io
      kind: ClusterRoleBinding
    - group: apiextensions.k8s.io
      kind: CustomResourceDefinition
  namespaceResourceWhitelist:
    - group: ''
      kind: ConfigMap
    - group: ''
      kind: Secret
    - group: ''
      kind: Service
    - group: ''
      kind: ServiceAccount
    - group: apps
      kind: Deployment
    - group: apps
      kind: StatefulSet
    - group: apps
      kind: DaemonSet
    - group: networking.k8s.io
      kind: Ingress
    - group: networking.k8s.io
      kind: NetworkPolicy
    - group: autoscaling
      kind: HorizontalPodAutoscaler
    - group: policy
      kind: PodDisruptionBudget
  roles:
    - name: admin
      description: Full access to MetaFunction project
      policies:
        - p, proj:metafunction-project:admin, applications, *, metafunction-project/*, allow
        - p, proj:metafunction-project:admin, repositories, *, *, allow
      groups:
        - metafunction:admin
    - name: developer
      description: Developer access to MetaFunction project
      policies:
        - p, proj:metafunction-project:developer, applications, get, metafunction-project/*, allow
        - p, proj:metafunction-project:developer, applications, sync, metafunction-project/*, allow
      groups:
        - metafunction:developer
---
# ArgoCD Repository configuration
apiVersion: v1
kind: Secret
metadata:
  name: metafunction-repo
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
type: Opaque
stringData:
  type: git
  url: https://github.com/your-org/metafunction
  username: git
  password: # Your GitHub token
---
# ArgoCD Notification Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.slack: |
    token: # Your Slack token
    
  template.app-deployed: |
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version.
  
  template.app-health-degraded: |
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded health.
  
  template.app-sync-failed: |
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync failed.
  
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.sync.revision
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  
  trigger.on-sync-failed: |
    - description: Application sync failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  
  subscriptions: |
    - recipients:
      - slack:general
      triggers:
      - on-deployed
      - on-health-degraded
      - on-sync-failed
