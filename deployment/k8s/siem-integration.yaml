# Security Information and Event Management (SIEM) Integration
# Comprehensive SIEM solution with log aggregation, threat detection, and incident response

---
# SIEM Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: siem
  labels:
    name: siem
---
# Elasticsearch for SIEM Data Storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-siem
  namespace: siem
spec:
  serviceName: elasticsearch-siem
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch-siem
  template:
    metadata:
      labels:
        app: elasticsearch-siem
    spec:
      containers:
      - name: elasticsearch
        image: elasticsearch:8.11.0
        ports:
        - containerPort: 9200
        - containerPort: 9300
        env:
        - name: cluster.name
          value: "siem-cluster"
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "elasticsearch-siem-0.elasticsearch-siem,elasticsearch-siem-1.elasticsearch-siem,elasticsearch-siem-2.elasticsearch-siem"
        - name: cluster.initial_master_nodes
          value: "elasticsearch-siem-0,elasticsearch-siem-1,elasticsearch-siem-2"
        - name: ES_JAVA_OPTS
          value: "-Xms2g -Xmx2g"
        - name: xpack.security.enabled
          value: "true"
        - name: xpack.security.enrollment.enabled
          value: "true"
        - name: xpack.security.http.ssl.enabled
          value: "false"
        - name: xpack.security.transport.ssl.enabled
          value: "false"
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 1000m
            memory: 2Gi
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-siem
  namespace: siem
spec:
  selector:
    app: elasticsearch-siem
  ports:
  - name: rest
    port: 9200
    targetPort: 9200
  - name: inter-node
    port: 9300
    targetPort: 9300
  type: ClusterIP
---
# Kibana for SIEM Visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-siem
  namespace: siem
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kibana-siem
  template:
    metadata:
      labels:
        app: kibana-siem
    spec:
      containers:
      - name: kibana
        image: kibana:8.11.0
        ports:
        - containerPort: 5601
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch-siem:9200"
        - name: ELASTICSEARCH_USERNAME
          value: "elastic"
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        - name: XPACK_SECURITY_ENABLED
          value: "true"
        - name: XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY
          valueFrom:
            secretKeyRef:
              name: kibana-encryption-key
              key: key
        volumeMounts:
        - name: kibana-config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
      volumes:
      - name: kibana-config
        configMap:
          name: kibana-config
---
# Kibana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: siem
data:
  kibana.yml: |
    server.host: "0.0.0.0"
    server.shutdownTimeout: "5s"
    elasticsearch.hosts: ["http://elasticsearch-siem:9200"]
    monitoring.ui.container.elasticsearch.enabled: true
    
    # SIEM specific configuration
    xpack.siem.enabled: true
    xpack.case.enabled: true
    xpack.actions.enabled: true
    xpack.alerts.enabled: true
    
    # Security configuration
    xpack.security.enabled: true
    xpack.security.session.idleTimeout: "1h"
    xpack.security.session.lifespan: "30d"
    
    # Logging configuration
    logging.appenders:
      file:
        type: file
        fileName: /var/log/kibana.log
        layout:
          type: json
    logging.root.level: info
---
# Kibana Service
apiVersion: v1
kind: Service
metadata:
  name: kibana-siem
  namespace: siem
spec:
  selector:
    app: kibana-siem
  ports:
  - name: http
    port: 5601
    targetPort: 5601
  type: ClusterIP
---
# Logstash for Log Processing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash-siem
  namespace: siem
spec:
  replicas: 3
  selector:
    matchLabels:
      app: logstash-siem
  template:
    metadata:
      labels:
        app: logstash-siem
    spec:
      containers:
      - name: logstash
        image: logstash:8.11.0
        ports:
        - containerPort: 5044  # Beats input
        - containerPort: 9600  # HTTP API
        env:
        - name: LS_JAVA_OPTS
          value: "-Xmx2g -Xms2g"
        - name: ELASTICSEARCH_HOSTS
          value: "elasticsearch-siem:9200"
        - name: ELASTICSEARCH_USERNAME
          value: "elastic"
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/pipeline
        - name: logstash-settings
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        resources:
          limits:
            cpu: 1000m
            memory: 3Gi
          requests:
            cpu: 500m
            memory: 2Gi
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
      - name: logstash-settings
        configMap:
          name: logstash-settings
---
# Logstash Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: siem
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      
      # Kubernetes audit logs
      http {
        port => 8080
        codec => json
        tags => ["k8s-audit"]
      }
      
      # Application logs from Fluentd
      http {
        port => 8081
        codec => json
        tags => ["app-logs"]
      }
      
      # Security events
      http {
        port => 8082
        codec => json
        tags => ["security-events"]
      }
    }
    
    filter {
      # Parse timestamps
      date {
        match => [ "timestamp", "ISO8601" ]
      }
      
      # Kubernetes audit log processing
      if "k8s-audit" in [tags] {
        mutate {
          add_field => { "event_type" => "kubernetes_audit" }
        }
        
        # Extract user information
        if [user] {
          mutate {
            add_field => { "user_name" => "%{[user][username]}" }
            add_field => { "user_group" => "%{[user][groups]}" }
          }
        }
        
        # Extract resource information
        if [objectRef] {
          mutate {
            add_field => { "resource_namespace" => "%{[objectRef][namespace]}" }
            add_field => { "resource_name" => "%{[objectRef][name]}" }
            add_field => { "resource_kind" => "%{[objectRef][resource]}" }
          }
        }
        
        # Security analysis
        if [verb] in ["create", "update", "patch", "delete"] and [objectRef][resource] in ["secrets", "configmaps", "roles", "rolebindings"] {
          mutate {
            add_field => { "security_risk" => "high" }
            add_tag => ["security_sensitive"]
          }
        }
      }
      
      # Application log processing
      if "app-logs" in [tags] {
        mutate {
          add_field => { "event_type" => "application_log" }
        }
        
        # Detect authentication events
        if [message] =~ /(?i)(login|logout|authentication|authorization)/ {
          mutate {
            add_tag => ["authentication"]
          }
        }
        
        # Detect error events
        if [level] in ["ERROR", "FATAL", "error", "fatal"] {
          mutate {
            add_tag => ["error"]
          }
        }
        
        # Detect potential security issues
        if [message] =~ /(?i)(sql injection|xss|csrf|unauthorized|forbidden|attack)/ {
          mutate {
            add_tag => ["security_alert"]
            add_field => { "security_risk" => "high" }
          }
        }
      }
      
      # Security event processing
      if "security-events" in [tags] {
        mutate {
          add_field => { "event_type" => "security_event" }
        }
        
        # Enrich with threat intelligence
        if [source_ip] {
          # Check against threat intelligence feeds
          # This would be integrated with external threat feeds
          mutate {
            add_field => { "threat_intel_checked" => "true" }
          }
        }
      }
      
      # GeoIP enrichment
      if [source_ip] {
        geoip {
          source => "source_ip"
          target => "geoip"
        }
      }
      
      # User agent parsing
      if [user_agent] {
        useragent {
          source => "user_agent"
          target => "ua"
        }
      }
      
      # Add correlation ID for tracking
      if ![correlation_id] {
        uuid {
          target => "correlation_id"
        }
      }
      
      # Calculate risk score
      ruby {
        code => "
          risk_score = 0
          
          # Base risk assessment
          if event.get('security_risk') == 'high'
            risk_score += 50
          elsif event.get('security_risk') == 'medium'
            risk_score += 25
          end
          
          # Failed authentication
          if event.get('tags') && event.get('tags').include?('authentication') && event.get('status') == 'failed'
            risk_score += 30
          end
          
          # Error events
          if event.get('tags') && event.get('tags').include?('error')
            risk_score += 10
          end
          
          # Security alerts
          if event.get('tags') && event.get('tags').include?('security_alert')
            risk_score += 40
          end
          
          # Sensitive operations on critical resources
          if event.get('tags') && event.get('tags').include?('security_sensitive')
            risk_score += 20
          end
          
          event.set('risk_score', risk_score)
          
          # Risk level classification
          if risk_score >= 70
            event.set('risk_level', 'critical')
          elsif risk_score >= 40
            event.set('risk_level', 'high')
          elsif risk_score >= 20
            event.set('risk_level', 'medium')
          else
            event.set('risk_level', 'low')
          end
        "
      }
    }
    
    output {
      # Send to Elasticsearch with different indices based on event type
      if [event_type] == "kubernetes_audit" {
        elasticsearch {
          hosts => ["${ELASTICSEARCH_HOSTS}"]
          user => "${ELASTICSEARCH_USERNAME}"
          password => "${ELASTICSEARCH_PASSWORD}"
          index => "siem-k8s-audit-%{+YYYY.MM.dd}"
        }
      } else if [event_type] == "security_event" {
        elasticsearch {
          hosts => ["${ELASTICSEARCH_HOSTS}"]
          user => "${ELASTICSEARCH_USERNAME}"
          password => "${ELASTICSEARCH_PASSWORD}"
          index => "siem-security-events-%{+YYYY.MM.dd}"
        }
      } else {
        elasticsearch {
          hosts => ["${ELASTICSEARCH_HOSTS}"]
          user => "${ELASTICSEARCH_USERNAME}"
          password => "${ELASTICSEARCH_PASSWORD}"
          index => "siem-application-logs-%{+YYYY.MM.dd}"
        }
      }
      
      # Alert on high-risk events
      if [risk_level] == "critical" or [risk_level] == "high" {
        http {
          url => "http://alertmanager-service.monitoring.svc.cluster.local:9093/api/v1/alerts"
          http_method => "post"
          content_type => "application/json"
          format => "json"
          mapping => {
            "alerts" => [{
              "labels" => {
                "alertname" => "SIEM_Security_Alert"
                "severity" => "%{risk_level}"
                "event_type" => "%{event_type}"
                "correlation_id" => "%{correlation_id}"
              }
              "annotations" => {
                "summary" => "Security event detected: %{[message]}"
                "description" => "Risk Score: %{risk_score}, Event: %{[message]}"
              }
              "startsAt" => "%{@timestamp}"
            }]
          }
        }
      }
      
      # Debug output (can be disabled in production)
      if [risk_level] in ["critical", "high"] {
        stdout {
          codec => rubydebug
        }
      }
    }
---
# Logstash Settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-settings
  namespace: siem
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    pipeline.workers: 4
    pipeline.batch.size: 1000
    pipeline.batch.delay: 5
    queue.type: persisted
    queue.max_bytes: 1gb
    dead_letter_queue.enable: true
---
# Logstash Service
apiVersion: v1
kind: Service
metadata:
  name: logstash-siem
  namespace: siem
spec:
  selector:
    app: logstash-siem
  ports:
  - name: beats
    port: 5044
    targetPort: 5044
  - name: k8s-audit
    port: 8080
    targetPort: 8080
  - name: app-logs
    port: 8081
    targetPort: 8081
  - name: security-events
    port: 8082
    targetPort: 8082
  - name: http-api
    port: 9600
    targetPort: 9600
  type: ClusterIP
---
# Threat Detection Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: threat-detection-rules
  namespace: siem
data:
  detection-rules.yml: |
    # Brute Force Attack Detection
    - rule_id: "brute_force_detection"
      name: "Brute Force Authentication Attempts"
      description: "Detects multiple failed authentication attempts from the same source"
      query: |
        {
          "query": {
            "bool": {
              "must": [
                {"term": {"tags": "authentication"}},
                {"term": {"status": "failed"}},
                {"range": {"@timestamp": {"gte": "now-5m"}}}
              ]
            }
          },
          "aggs": {
            "by_source": {
              "terms": {"field": "source_ip"},
              "aggs": {
                "failed_attempts": {"value_count": {"field": "source_ip"}}
              }
            }
          }
        }
      threshold: 10
      time_window: "5m"
      severity: "high"
    
    # Privilege Escalation Detection
    - rule_id: "privilege_escalation"
      name: "Privilege Escalation Attempt"
      description: "Detects attempts to escalate privileges in Kubernetes"
      query: |
        {
          "query": {
            "bool": {
              "must": [
                {"term": {"event_type": "kubernetes_audit"}},
                {"terms": {"verb": ["create", "update", "patch"]}},
                {"terms": {"resource_kind": ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]}}
              ]
            }
          }
        }
      threshold: 1
      time_window: "1m"
      severity: "critical"
    
    # Suspicious File Access
    - rule_id: "suspicious_file_access"
      name: "Suspicious File Access Pattern"
      description: "Detects access to sensitive files or directories"
      query: |
        {
          "query": {
            "bool": {
              "must": [
                {"term": {"event_type": "application_log"}},
                {"regexp": {"message": ".*(/etc/passwd|/etc/shadow|/root/|/var/lib/docker/).*"}}
              ]
            }
          }
        }
      threshold: 1
      time_window: "1m"
      severity: "medium"
    
    # Data Exfiltration Detection
    - rule_id: "data_exfiltration"
      name: "Potential Data Exfiltration"
      description: "Detects large data transfers or unusual access patterns"
      query: |
        {
          "query": {
            "bool": {
              "must": [
                {"range": {"response_size": {"gte": 10485760}}},
                {"range": {"@timestamp": {"gte": "now-1h"}}}
              ]
            }
          },
          "aggs": {
            "by_user": {
              "terms": {"field": "user_name"},
              "aggs": {
                "total_bytes": {"sum": {"field": "response_size"}}
              }
            }
          }
        }
      threshold: 104857600  # 100MB
      time_window: "1h"
      severity: "high"
    
    # Malware Detection
    - rule_id: "malware_detection"
      name: "Malware Activity Detection"
      description: "Detects patterns indicating malware activity"
      query: |
        {
          "query": {
            "bool": {
              "should": [
                {"regexp": {"message": ".*(cryptominer|ransomware|backdoor|trojan).*"}},
                {"regexp": {"process_name": ".*(nc|netcat|ncat|socat).*"}},
                {"regexp": {"command_line": ".*(wget|curl).*(tmp|dev/shm).*"}}
              ]
            }
          }
        }
      threshold: 1
      time_window: "1m"
      severity: "critical"
---
# Automated Threat Detection Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: threat-detector
  namespace: siem
spec:
  replicas: 2
  selector:
    matchLabels:
      app: threat-detector
  template:
    metadata:
      labels:
        app: threat-detector
    spec:
      containers:
      - name: threat-detector
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          pip install elasticsearch requests pyyaml
          
          cat > /app/threat_detector.py << 'EOF'
          import json
          import time
          import yaml
          import requests
          from datetime import datetime, timedelta
          from elasticsearch import Elasticsearch
          
          # Configuration
          ES_HOST = "elasticsearch-siem:9200"
          ES_USER = "elastic"
          ES_PASS = "changeme"  # Should be from secret
          ALERT_WEBHOOK = "http://alertmanager-service.monitoring.svc.cluster.local:9093/api/v1/alerts"
          
          def load_detection_rules():
              with open('/config/detection-rules.yml', 'r') as f:
                  return yaml.safe_load(f)
          
          def execute_detection_rule(es, rule):
              print(f"Executing rule: {rule['name']}")
              
              try:
                  # Execute the detection query
                  response = es.search(
                      index=f"siem-*",
                      body=rule['query'],
                      size=0
                  )
                  
                  # Check if threshold is exceeded
                  hits = response['hits']['total']['value']
                  aggregations = response.get('aggregations', {})
                  
                  if hits >= rule.get('threshold', 1):
                      print(f"Threat detected: {rule['name']} - {hits} occurrences")
                      send_alert(rule, hits, aggregations)
                  
              except Exception as e:
                  print(f"Error executing rule {rule['rule_id']}: {e}")
          
          def send_alert(rule, count, aggregations):
              alert = {
                  "alerts": [{
                      "labels": {
                          "alertname": f"SIEM_ThreatDetection_{rule['rule_id']}",
                          "severity": rule.get('severity', 'medium'),
                          "rule_id": rule['rule_id'],
                          "rule_name": rule['name']
                      },
                      "annotations": {
                          "summary": rule['name'],
                          "description": f"{rule['description']} - {count} occurrences detected",
                          "detection_details": json.dumps(aggregations)
                      },
                      "startsAt": datetime.utcnow().isoformat() + "Z"
                  }]
              }
              
              try:
                  response = requests.post(
                      ALERT_WEBHOOK,
                      json=alert,
                      timeout=10
                  )
                  print(f"Alert sent: {response.status_code}")
              except Exception as e:
                  print(f"Failed to send alert: {e}")
          
          def main():
              # Initialize Elasticsearch client
              es = Elasticsearch(
                  [ES_HOST],
                  http_auth=(ES_USER, ES_PASS),
                  verify_certs=False
              )
              
              print("Threat Detection Service Started")
              
              while True:
                  try:
                      rules = load_detection_rules()
                      
                      for rule in rules:
                          execute_detection_rule(es, rule)
                      
                      # Wait before next scan
                      time.sleep(60)  # Check every minute
                      
                  except Exception as e:
                      print(f"Error in main loop: {e}")
                      time.sleep(30)
          
          if __name__ == "__main__":
              main()
          EOF
          
          python /app/threat_detector.py
        volumeMounts:
        - name: detection-rules
          mountPath: /config
        env:
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: detection-rules
        configMap:
          name: threat-detection-rules
---
# SIEM Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: siem-dashboard
  namespace: siem
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "SIEM Security Dashboard",
        "tags": ["siem", "security", "threats"],
        "panels": [
          {
            "title": "Security Events Overview",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(increase(siem_events_total[24h]))",
                "legendFormat": "Total Events (24h)"
              },
              {
                "expr": "sum(increase(siem_high_risk_events_total[24h]))",
                "legendFormat": "High Risk Events (24h)"
              }
            ]
          },
          {
            "title": "Risk Score Distribution",
            "type": "piechart",
            "targets": [
              {
                "expr": "sum by (risk_level) (siem_events_by_risk_level)",
                "legendFormat": "{{ risk_level }}"
              }
            ]
          },
          {
            "title": "Top Security Threats",
            "type": "table",
            "targets": [
              {
                "expr": "topk(10, sum by (threat_type) (increase(siem_threats_detected[24h])))",
                "format": "table"
              }
            ]
          },
          {
            "title": "Authentication Events",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(siem_authentication_events_total[5m])",
                "legendFormat": "Total Auth Events/sec"
              },
              {
                "expr": "rate(siem_failed_authentication_events_total[5m])",
                "legendFormat": "Failed Auth Events/sec"
              }
            ]
          },
          {
            "title": "Geographic Distribution",
            "type": "worldmap",
            "targets": [
              {
                "expr": "sum by (country) (siem_events_by_country)",
                "legendFormat": "{{ country }}"
              }
            ]
          }
        ]
      }
    }
---
# Secrets for SIEM Components
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-credentials
  namespace: siem
type: Opaque
stringData:
  username: "elastic"
  password: "changeme"  # Change this in production
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana-encryption-key
  namespace: siem
type: Opaque
stringData:
  key: "a_random_32_character_string_here"  # Change this in production
---
# SIEM Monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: siem-monitor
  namespace: siem
spec:
  selector:
    matchLabels:
      app: logstash-siem
  endpoints:
  - port: http-api
    interval: 30s
    path: /_node/stats
---
# SIEM Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: siem-alerts
  namespace: siem
spec:
  groups:
  - name: siem.rules
    rules:
    - alert: SIEMHighRiskEvent
      expr: |
        increase(siem_high_risk_events_total[5m]) > 10
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "High number of high-risk security events"
        description: "{{ $value }} high-risk security events detected in the last 5 minutes"
        
    - alert: SIEMServiceDown
      expr: |
        up{job="siem-logstash"} == 0
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "SIEM service is down"
        description: "SIEM Logstash service is not responding"
        
    - alert: SIEMElasticsearchDown
      expr: |
        up{job="siem-elasticsearch"} == 0
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "SIEM Elasticsearch is down"
        description: "SIEM Elasticsearch cluster is not responding"
        
    - alert: SIEMBruteForceDetected
      expr: |
        increase(siem_brute_force_attempts_total[5m]) > 50
      for: 1m
      labels:
        severity: high
      annotations:
        summary: "Brute force attack detected"
        description: "{{ $value }} brute force attempts detected in the last 5 minutes"
