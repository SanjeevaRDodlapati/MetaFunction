# HashiCorp Vault for secrets management
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: metafunction
---
# Vault ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: metafunction
data:
  vault.hcl: |
    ui = true
    
    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_disable = 1
    }
    
    storage "consul" {
      address = "consul:8500"
      path = "vault/"
    }
    
    api_addr = "http://vault:8200"
    cluster_addr = "http://vault:8201"
    
    # Enable Kubernetes auth method
    auth "kubernetes" {
      path = "kubernetes"
    }
    
    # Policies for MetaFunction
    policy "metafunction-policy" {
      path "secret/data/metafunction/*" {
        capabilities = ["read", "list"]
      }
      
      path "database/creds/metafunction" {
        capabilities = ["read"]
      }
    }
---
# Consul for Vault storage backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
  namespace: metafunction
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul
  template:
    metadata:
      labels:
        app: consul
    spec:
      containers:
      - name: consul
        image: consul:1.14.0
        ports:
        - containerPort: 8500
        command:
        - consul
        - agent
        - -server
        - -bootstrap
        - -data-dir=/consul/data
        - -ui
        - -client=0.0.0.0
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: consul-data
          mountPath: /consul/data
      volumes:
      - name: consul-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: consul
  namespace: metafunction
spec:
  selector:
    app: consul
  ports:
    - protocol: TCP
      port: 8500
      targetPort: 8500
  type: ClusterIP
---
# Vault Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: metafunction
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault
      containers:
      - name: vault
        image: vault:1.12.0
        ports:
        - containerPort: 8200
        - containerPort: 8201
        env:
        - name: VAULT_ADDR
          value: "http://localhost:8200"
        - name: VAULT_API_ADDR
          value: "http://vault:8200"
        command:
        - vault
        - server
        - -config=/vault/config/vault.hcl
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        - name: vault-data
          mountPath: /vault/data
        securityContext:
          capabilities:
            add: ["IPC_LOCK"]
      volumes:
      - name: vault-config
        configMap:
          name: vault-config
      - name: vault-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: metafunction
spec:
  selector:
    app: vault
  ports:
    - name: vault-port
      protocol: TCP
      port: 8200
      targetPort: 8200
    - name: cluster-port
      protocol: TCP
      port: 8201
      targetPort: 8201
  type: ClusterIP
---
# Vault Agent for secret injection
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: metafunction
data:
  vault-agent.hcl: |
    exit_after_auth = false
    pid_file = "/home/vault/pidfile"

    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "metafunction"
        }
      }

      sink "file" {
        config = {
          path = "/home/vault/.vault-token"
        }
      }
    }

    cache {
      use_auto_auth_token = true
    }

    listener "tcp" {
      address = "127.0.0.1:8007"
      tls_disable = true
    }

    template {
      source = "/vault/templates/api-keys.tpl"
      destination = "/vault/secrets/api-keys"
    }

    template {
      source = "/vault/templates/database.tpl"
      destination = "/vault/secrets/database"
    }

  api-keys.tpl: |
    {{ with secret "secret/data/metafunction/api-keys" }}
    export OPENAI_API_KEY="{{ .Data.data.openai_key }}"
    export DEEPSEEK_API_KEY="{{ .Data.data.deepseek_key }}"
    export PERPLEXITY_API_KEY="{{ .Data.data.perplexity_key }}"
    {{ end }}

  database.tpl: |
    {{ with secret "database/creds/metafunction" }}
    export DATABASE_URL="postgresql://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/metafunction"
    {{ end }}
---
# External Secrets Operator for Vault integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: metafunction
spec:
  provider:
    vault:
      server: "http://vault:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "metafunction"
          serviceAccountRef:
            name: "metafunction-vault-sa"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: metafunction-api-keys
  namespace: metafunction
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: metafunction-secrets
    creationPolicy: Owner
  data:
  - secretKey: openai-api-key
    remoteRef:
      key: metafunction/api-keys
      property: openai_key
  - secretKey: deepseek-api-key
    remoteRef:
      key: metafunction/api-keys
      property: deepseek_key
  - secretKey: perplexity-api-key
    remoteRef:
      key: metafunction/api-keys
      property: perplexity_key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: metafunction-database
  namespace: metafunction
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: metafunction-database-secret
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: database/creds/metafunction
      property: username
  - secretKey: password
    remoteRef:
      key: database/creds/metafunction
      property: password
---
# Service Account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metafunction-vault-sa
  namespace: metafunction
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metafunction-vault-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metafunction-vault-sa
  namespace: metafunction
---
# Vault initialization job
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: metafunction
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: vault-init
        image: vault:1.12.0
        env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault..."
            sleep 5
          done

          # Initialize Vault if not already initialized
          if ! vault status | grep -q "Initialized.*true"; then
            vault operator init -key-shares=5 -key-threshold=3 > /tmp/vault-keys
            
            # Store unseal keys in a ConfigMap (for demo - use proper secret management in production)
            kubectl create configmap vault-keys --from-file=/tmp/vault-keys -n metafunction
          fi

          # Unseal Vault
          UNSEAL_KEY1=$(kubectl get configmap vault-keys -o jsonpath='{.data.vault-keys}' | grep "Unseal Key 1" | cut -d' ' -f4)
          UNSEAL_KEY2=$(kubectl get configmap vault-keys -o jsonpath='{.data.vault-keys}' | grep "Unseal Key 2" | cut -d' ' -f4)
          UNSEAL_KEY3=$(kubectl get configmap vault-keys -o jsonpath='{.data.vault-keys}' | grep "Unseal Key 3" | cut -d' ' -f4)
          
          vault operator unseal $UNSEAL_KEY1
          vault operator unseal $UNSEAL_KEY2
          vault operator unseal $UNSEAL_KEY3

          # Get root token and authenticate
          ROOT_TOKEN=$(kubectl get configmap vault-keys -o jsonpath='{.data.vault-keys}' | grep "Initial Root Token" | cut -d' ' -f4)
          vault auth $ROOT_TOKEN

          # Enable Kubernetes auth
          vault auth enable kubernetes
          
          # Configure Kubernetes auth
          vault write auth/kubernetes/config \
            token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
            kubernetes_host="https://kubernetes.default.svc.cluster.local:443" \
            kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

          # Create policy
          vault policy write metafunction-policy - <<EOF
          path "secret/data/metafunction/*" {
            capabilities = ["read", "list"]
          }
          path "database/creds/metafunction" {
            capabilities = ["read"]
          }
          EOF

          # Create role
          vault write auth/kubernetes/role/metafunction \
            bound_service_account_names=metafunction-vault-sa \
            bound_service_account_namespaces=metafunction \
            policies=metafunction-policy \
            ttl=24h

          # Enable secrets engine
          vault secrets enable -path=secret kv-v2

          # Store sample secrets (replace with actual secrets)
          vault kv put secret/metafunction/api-keys \
            openai_key="your-openai-key" \
            deepseek_key="your-deepseek-key" \
            perplexity_key="your-perplexity-key"

          echo "Vault initialization completed!"
